import {assert} from 'chai';
import {assessVulnerability} from '../../../../src/AI/processModule/vulnerability';
import {createUnit} from '../../../../src/unit/create';
import {removeAllUnits} from '../../../../src/store/unit/units';
import {removeUnit} from '../../../../src/unit/remove';
import Unit from '../../../../src/unit/types/Unit';

describe('AI processModule vulnerability test', () => {
    
    describe('assessVulnerability test', () => {
        let unit1:Unit, unit2:Unit, unit3:Unit, unit4:Unit, unit5:Unit;
        let unit6:Unit, unit7:Unit, unit8:Unit, unit9:Unit;

        before(() => {
        removeAllUnits();
            unit1 = createUnit('lightCavalry', 1000, 80, 'computer');
            unit2 = createUnit('scouts', 1249, 400, 'computer');
            unit3 = createUnit('pikemen', 120, 560, 'computer');
            unit4 = createUnit('militia', 560, 0, 'computer');
            unit5 = createUnit('hoplites', 560, 40, 'computer');
            unit6 = createUnit('pikemen', 400, 400, 'computer');
            unit7 = createUnit('heavyCavalry', 400, 360, 'computer');
            unit8 = createUnit('lightInfantry', 440, 360, 'computer');
            unit9 = createUnit('scouts', 440, 440, 'computer');
        });

        // remove units after test completed
        after(() => {
            removeUnit(unit1);
            removeUnit(unit2);
            removeUnit(unit3);
            removeUnit(unit4);
            removeUnit(unit5);
            removeUnit(unit6);
            removeUnit(unit7);
            removeUnit(unit8);
            removeUnit(unit9);
        });

        it('unit1 should have 10 vulnerability', () => {
            let vulnerability:number = assessVulnerability(unit1);
            assert.equal(vulnerability, 10);
        });

        it('unit2 should have 50 vulnerability', () => {
            let vulnerability:number = assessVulnerability(unit2);
            assert.equal(vulnerability, 50);
        });

        it('unit3 should have 100 vulnerability', () => {
            let vulnerability:number = assessVulnerability(unit3);
            assert.equal(vulnerability, 100);
        });

        it('unit4 should have 30 vulnerability', () => {
            let vulnerability:number = assessVulnerability(unit4);
            assert.equal(vulnerability, 30);
        });

        it('unit5 should have 80 vulnerability', () => {
            let vulnerability:number = assessVulnerability(unit5);
            assert.equal(vulnerability, 80);
        });

        it('unit6 should have 20 vulnerability', () => {
            let vulnerability:number = assessVulnerability(unit6);
            assert.equal(vulnerability, 20);
        });

        it('unit7 should have 0 vulnerability', () => {
            let vulnerability:number = assessVulnerability(unit7);
            assert.equal(vulnerability, 0);
        });

        it('unit8 should have 0 vulnerability', () => {
            let vulnerability:number = assessVulnerability(unit8);
            assert.equal(vulnerability, 0);
        });

        it('unit9 should have 0 vulnerability', () => {
            let vulnerability:number = assessVulnerability(unit9);
            assert.equal(vulnerability, 0);
        });

    });

});